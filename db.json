{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner1.jpg","path":"css/images/banner1.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/novelai积累心得.md","hash":"62a81db8ff14a77963a7e67c482bd6b20699cdef","modified":1682583041059},{"_id":"source/_posts/test.md","hash":"348d534dc70c532131964c80ad5b738dda80a121","modified":1677679853269},{"_id":"source/_posts/hello-world.md","hash":"0105bb1d7d8a008b587475135d1bbf7ab4a78b70","modified":1677679068890},{"_id":"source/_posts/线程池的小例子.md","hash":"dfb76cf6a9f2afc54fd079dbbe984d0968538ed8","modified":1682582826681},{"_id":"themes/landscape/.npmignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1677675816767},{"_id":"themes/landscape/_config.yml","hash":"ce9d2939245209b8f5c5bbbdadc917d86057d032","modified":1677675816767},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1677675816782},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1677675816767},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1677675816767},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1677675816767},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1677675816767},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1677675816767},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1677675816767},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1677675816767},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1677675816767},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1677675816767},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1677675816767},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1677675816767},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1677675816767},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1677675816782},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1677675816782},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1677675816767},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1677675816782},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1677675816782},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1677675816782},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1677675816782},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1677675816767},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1677675816782},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1677675816782},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1677675816767},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1677675816767},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1677675816767},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1677675816767},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1677675816767},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1677675816767},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1677675816767},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1677675816767},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1677675816767},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1677675816782},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1677675816767},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1677675816767},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1677675816782},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1677675816782},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1677675816782},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1677675816782},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1677675816782},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1677675816782},{"_id":"themes/landscape/source/css/_variables.styl","hash":"739cb40b71cafb7c5b4ab9c1ee33c15a8a985b61","modified":1677678938532},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1677675816782},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1677675816782},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1677675816782},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1677675816798},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1677675816782},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1677675816782},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1677675816798},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1677675816798},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1677675816782},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1677675816767},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1677675816767},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1677675816767},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1677675816782},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1677675816767},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1677675816767},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1677675816782},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1677675816782},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1677675816782},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1677675816782},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1677675816782},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1677675816782},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1677675816782},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1677675816782},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1677675816782},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1677675816782},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1677675816782},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1677675816782},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1677675816798},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1677675816782},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1677675816782},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1677675816782},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1677675816782},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1677675816782},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1677675816782},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1677675816782},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1677675816782},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1677675816782},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1677675816798},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1677675816782},{"_id":"themes/landscape/source/css/images/banner1.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1677675816782},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1677675816782},{"_id":"source/_posts/novelai积累心得/grid-0177_1676116091805_0.jpg","hash":"b33443990eca7d7f85fca014fe6f5ce0eac33eb6","modified":1676115838605},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"cd9445b03b8387396d74f0ebbbbca430a8c51ef3","modified":1677678615337}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","date":"2022-10-27T20:38:20.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2022-10-28 04:38:20\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2023-03-01T13:57:48.890Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clh0gaw65000078w12wfo9587","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"test","date":"2023-03-01T14:10:53.000Z","_content":"","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2023-03-01 22:10:53\ntags:\n---\n","slug":"test","published":1,"updated":"2023-03-01T14:10:53.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clh0gaw6a000178w1c8avfhhw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"novelai积累心得","date":"2023-02-28T06:38:48.000Z","_content":"# 炼丹初体验  \n\n**数据集说明**：25张虎源太，姿势背景画风都各不相同，且没有去掉图片中的字符和水印，像素边长400，只是先试试水。使用BLIP生成tag。  \n\n**训练说明**：token向量数为5，约3600个step，耗时1h45min  \n\n**生成说明**:Sampling steps=28，提示词相关性=11,像素边长512  \n\n**tag**:kogenta-0-*,high quality  \n\n**反tag**:comic,((cropped)),breast,Female sexual organs,Feminization,female,girl,lady,skirt,dress,extra legs,extra heads,extra limbs,skirt,dress,bad anatomy,bad hands,text,error,missing fingers,extra digit,fewer digits,cropped,worst quality,low quality,normal quality,jpeg artifacts,signature,watermark,username,blurry, missing arms,long neck,humpbacked,shadow,lowres,woman,Feminine,bad feet,pregnant,ugly,duplicate,extra fingers,fused fingers,too many fingers,mutated hands,poorly drawn face,mutation,malformed limbs,disfigured,extra limbs,missing arms,missing legs,extra arms,deformed legs,extra legs,hermaphrodite,transsexual,more than 2 knee,  \n\n\n\n要测试训练模型的水平，首先需要知道tag的重要性  \n\n## 训练结果  \n\n**500 step**:  loss=0.1582759  \n\n出乎意料。本以为只训练500 step效果应该会很差，没想到却能以另一种角度展示了绘画风格。人物虽然不像虎源太，但总的看来已经类似furry的范畴，毛发学的不错，皮肤人兽结合，只是发型不够到位。这个画风或许会有一部分人喜欢呢......  \n\n![](grid-0177_1676116091805_0.jpg)  \n\n\n\n**1000 step**:  loss=0.1004046  \n\n可以看到loss下降了，从生成图来看真的更像虎源太了，让我不得不赞叹这个模型的强悍本领。无论是发型还是皮肤毛发都很接近了。但是缺点仍然有很多，比如图像不够清晰，某些地方显得的很奇怪。  ","source":"_posts/novelai积累心得.md","raw":"---\ntitle: novelai积累心得\ndate: 2023-02-28 14:38:48\ntags:\n---\n# 炼丹初体验  \n\n**数据集说明**：25张虎源太，姿势背景画风都各不相同，且没有去掉图片中的字符和水印，像素边长400，只是先试试水。使用BLIP生成tag。  \n\n**训练说明**：token向量数为5，约3600个step，耗时1h45min  \n\n**生成说明**:Sampling steps=28，提示词相关性=11,像素边长512  \n\n**tag**:kogenta-0-*,high quality  \n\n**反tag**:comic,((cropped)),breast,Female sexual organs,Feminization,female,girl,lady,skirt,dress,extra legs,extra heads,extra limbs,skirt,dress,bad anatomy,bad hands,text,error,missing fingers,extra digit,fewer digits,cropped,worst quality,low quality,normal quality,jpeg artifacts,signature,watermark,username,blurry, missing arms,long neck,humpbacked,shadow,lowres,woman,Feminine,bad feet,pregnant,ugly,duplicate,extra fingers,fused fingers,too many fingers,mutated hands,poorly drawn face,mutation,malformed limbs,disfigured,extra limbs,missing arms,missing legs,extra arms,deformed legs,extra legs,hermaphrodite,transsexual,more than 2 knee,  \n\n\n\n要测试训练模型的水平，首先需要知道tag的重要性  \n\n## 训练结果  \n\n**500 step**:  loss=0.1582759  \n\n出乎意料。本以为只训练500 step效果应该会很差，没想到却能以另一种角度展示了绘画风格。人物虽然不像虎源太，但总的看来已经类似furry的范畴，毛发学的不错，皮肤人兽结合，只是发型不够到位。这个画风或许会有一部分人喜欢呢......  \n\n![](grid-0177_1676116091805_0.jpg)  \n\n\n\n**1000 step**:  loss=0.1004046  \n\n可以看到loss下降了，从生成图来看真的更像虎源太了，让我不得不赞叹这个模型的强悍本领。无论是发型还是皮肤毛发都很接近了。但是缺点仍然有很多，比如图像不够清晰，某些地方显得的很奇怪。  ","slug":"novelai积累心得","published":1,"updated":"2023-04-27T08:10:41.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clh0gaw6a000278w190825xvc","content":"<h1 id=\"炼丹初体验\"><a href=\"#炼丹初体验\" class=\"headerlink\" title=\"炼丹初体验\"></a>炼丹初体验</h1><p><strong>数据集说明</strong>：25张虎源太，姿势背景画风都各不相同，且没有去掉图片中的字符和水印，像素边长400，只是先试试水。使用BLIP生成tag。  </p>\n<p><strong>训练说明</strong>：token向量数为5，约3600个step，耗时1h45min  </p>\n<p><strong>生成说明</strong>:Sampling steps=28，提示词相关性=11,像素边长512  </p>\n<p><strong>tag</strong>:kogenta-0-*,high quality  </p>\n<p><strong>反tag</strong>:comic,((cropped)),breast,Female sexual organs,Feminization,female,girl,lady,skirt,dress,extra legs,extra heads,extra limbs,skirt,dress,bad anatomy,bad hands,text,error,missing fingers,extra digit,fewer digits,cropped,worst quality,low quality,normal quality,jpeg artifacts,signature,watermark,username,blurry, missing arms,long neck,humpbacked,shadow,lowres,woman,Feminine,bad feet,pregnant,ugly,duplicate,extra fingers,fused fingers,too many fingers,mutated hands,poorly drawn face,mutation,malformed limbs,disfigured,extra limbs,missing arms,missing legs,extra arms,deformed legs,extra legs,hermaphrodite,transsexual,more than 2 knee,  </p>\n<p>要测试训练模型的水平，首先需要知道tag的重要性  </p>\n<h2 id=\"训练结果\"><a href=\"#训练结果\" class=\"headerlink\" title=\"训练结果\"></a>训练结果</h2><p><strong>500 step</strong>:  loss=0.1582759  </p>\n<p>出乎意料。本以为只训练500 step效果应该会很差，没想到却能以另一种角度展示了绘画风格。人物虽然不像虎源太，但总的看来已经类似furry的范畴，毛发学的不错，皮肤人兽结合，只是发型不够到位。这个画风或许会有一部分人喜欢呢……  </p>\n<p><img src=\"grid-0177_1676116091805_0.jpg\">  </p>\n<p><strong>1000 step</strong>:  loss=0.1004046  </p>\n<p>可以看到loss下降了，从生成图来看真的更像虎源太了，让我不得不赞叹这个模型的强悍本领。无论是发型还是皮肤毛发都很接近了。但是缺点仍然有很多，比如图像不够清晰，某些地方显得的很奇怪。  </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"炼丹初体验\"><a href=\"#炼丹初体验\" class=\"headerlink\" title=\"炼丹初体验\"></a>炼丹初体验</h1><p><strong>数据集说明</strong>：25张虎源太，姿势背景画风都各不相同，且没有去掉图片中的字符和水印，像素边长400，只是先试试水。使用BLIP生成tag。  </p>\n<p><strong>训练说明</strong>：token向量数为5，约3600个step，耗时1h45min  </p>\n<p><strong>生成说明</strong>:Sampling steps=28，提示词相关性=11,像素边长512  </p>\n<p><strong>tag</strong>:kogenta-0-*,high quality  </p>\n<p><strong>反tag</strong>:comic,((cropped)),breast,Female sexual organs,Feminization,female,girl,lady,skirt,dress,extra legs,extra heads,extra limbs,skirt,dress,bad anatomy,bad hands,text,error,missing fingers,extra digit,fewer digits,cropped,worst quality,low quality,normal quality,jpeg artifacts,signature,watermark,username,blurry, missing arms,long neck,humpbacked,shadow,lowres,woman,Feminine,bad feet,pregnant,ugly,duplicate,extra fingers,fused fingers,too many fingers,mutated hands,poorly drawn face,mutation,malformed limbs,disfigured,extra limbs,missing arms,missing legs,extra arms,deformed legs,extra legs,hermaphrodite,transsexual,more than 2 knee,  </p>\n<p>要测试训练模型的水平，首先需要知道tag的重要性  </p>\n<h2 id=\"训练结果\"><a href=\"#训练结果\" class=\"headerlink\" title=\"训练结果\"></a>训练结果</h2><p><strong>500 step</strong>:  loss=0.1582759  </p>\n<p>出乎意料。本以为只训练500 step效果应该会很差，没想到却能以另一种角度展示了绘画风格。人物虽然不像虎源太，但总的看来已经类似furry的范畴，毛发学的不错，皮肤人兽结合，只是发型不够到位。这个画风或许会有一部分人喜欢呢……  </p>\n<p><img src=\"grid-0177_1676116091805_0.jpg\">  </p>\n<p><strong>1000 step</strong>:  loss=0.1004046  </p>\n<p>可以看到loss下降了，从生成图来看真的更像虎源太了，让我不得不赞叹这个模型的强悍本领。无论是发型还是皮肤毛发都很接近了。但是缺点仍然有很多，比如图像不够清晰，某些地方显得的很奇怪。  </p>\n"},{"_content":"## 1. 一个简单的在播放视频中使用线程池的例子\n\n在这个示例中，线程池创建了一个固定大小的线程池，最多同时运行 poolSize 个任务。每当用户播放一个短视频时，将启动下载、解码和渲染视频的任务，并在正确的时机等待任务完成或取消任务。使用的是submit()方法，返回一个future类型的对象。\n\n```\n  import java.util.concurrent.ExecutorService;\n  import java.util.concurrent.Executors;\n  import java.util.concurrent.Future;\n  import java.util.concurrent.TimeUnit;\n  \n  public class ShortVideoApp {\n      \n      private ExecutorService threadPool; // 线程池\n      \n      public ShortVideoApp(int poolSize) {\n          threadPool = Executors.newFixedThreadPool(poolSize); // 创建固定大小的线程池\n      }\n      \n      public void playShortVideo(String videoUrl) throws InterruptedException {\n          Future downloadFuture = threadPool.submit(() -> download(videoUrl)); // 提交下载任务并获取 Future 对象\n          Future decodeFuture = threadPool.submit(this::decode); // 提交解码任务并获取 Future 对象\n          Future renderFuture = threadPool.submit(this::render); // 提交渲染任务并获取 Future 对象\n          \n          try {\n              downloadFuture.get(1, TimeUnit.SECONDS); // 等待下载完成，最多等待 1 秒钟\n              decodeFuture.get(); // 等待解码完成\n              renderFuture.get(); // 等待渲染完成\n          } catch (Exception e) {\n              downloadFuture.cancel(true); // 取消下载任务\n              decodeFuture.cancel(true); // 取消解码任务\n              renderFuture.cancel(true); // 取消渲染任务\n              throw new InterruptedException(\"播放短视频失败：\" + e.getMessage());\n          }\n      }\n      \n      public void shutdown() {\n          threadPool.shutdown(); // 关闭线程池\n          try {\n              if (!threadPool.awaitTermination(60, TimeUnit.SECONDS)) { // 最多等待 60 秒钟\n                  threadPool.shutdownNow(); // 强制关闭线程池\n                  if (!threadPool.awaitTermination(60, TimeUnit.SECONDS)) { // 再次等待 60 秒钟\n                      System.err.println(\"线程池强制关闭失败\");\n                  }\n              }\n          } catch (InterruptedException e) {\n              threadPool.shutdownNow(); // 强制关闭线程池\n              Thread.currentThread().interrupt(); // 重置中断标志位\n          }\n      }\n      \n      private void download(String videoUrl) {\n          System.out.println(\"开始下载视频：\" + videoUrl);\n          try {\n              Thread.sleep(3000); // 模拟下载耗时\n          } catch (InterruptedException e) {\n              Thread.currentThread().interrupt(); // 重置中断标志位\n          }\n          System.out.println(\"视频下载完成\");\n      }\n      \n      private Void decode() {\n          System.out.println(\"开始解码视频\");\n          ...\n      }\n      \n      private Void render() {\n          System.out.println(\"开始渲染视频\");\n          ...\n      }\n  }\n```\n\n## 2.一个更简单的在播放视频中使用线程池的例子\n\n使用execute()，没有返回值，这会导致不知道任务是否成功执行。\n\nnew Runnable() 是在 Java 中创建一个实现了 Runnable 接口的匿名内部类的实例。Runnable 接口是 Java 标准库中定义的一个函数式接口，它只包含一个无参方法 run()。\n\n```\n  import java.util.concurrent.ExecutorService;\n  import java.util.concurrent.Executors;\n  \n  public class ShortVideoApp {\n      \n      private ExecutorService threadPool = Executors.newFixedThreadPool(4); // 创建固定大小的线程池\n      \n      public void playShortVideo(String videoUrl) {\n          threadPool.execute(new Runnable() { // 提交任务给线程池执行\n              @Override\n              public void run() {\n                  // 下载视频\n                  download(videoUrl);\n                  \n                  // 解码视频\n                  decode();\n                  \n                  // 渲染视频\n                  render();\n              }\n          });\n      }\n      \n      private void download(String videoUrl) {\n          // 下载视频文件\n      }\n      \n      private void decode() {\n          // 解码视频文件\n      }\n      \n      private void render() {\n          // 渲染视频画面\n      }\n  }\n```\n\n使用 new Runnable() 创建一个实现了 Runnable 接口的匿名内部类的实例，可以方便地将该实例作为参数传递给其他方法或类的构造函数。除此之外，也可以直接使用Lambda表达式：\n\n```\n  threadPool.execute(() -> {\n      // 下载视频\n      download(videoUrl);      \n      // 解码视频\n      decode();\n      // 渲染视频\n      render();\n  });\n```\n\n## 3. 使用线程池访问数据库\n\n```\n  import java.sql.Connection;\n  import java.sql.DriverManager;\n  import java.sql.ResultSet;\n  import java.sql.SQLException;\n  import java.sql.Statement;\n  import java.util.concurrent.ExecutorService;\n  import java.util.concurrent.Executors;\n  \n  public class DBUtil {\n      // JDBC driver和数据库URL\n      static final String JDBC_DRIVER = \"com.mysql.jdbc.Driver\";\n      static final String DB_URL = \"jdbc:mysql://localhost:3306/test\";\n  \n      // 数据库用户名和密码\n      static final String USER = \"root\";\n      static final String PASS = \"123456\";\n  \n      // 线程池大小\n      static final int THREAD_POOL_SIZE = 10;\n  \n      // 创建线程池\n      private static ExecutorService executorService = Executors.newFixedThreadPool(THREAD_POOL_SIZE);\n  \n      public static void main(String[] args) {\n          // 执行多个查询任务\n          for (int i = 1; i <= 10; i++) {\n              executorService.execute(new QueryTask(i));\n          }\n  \n          // 关闭线程池\n          executorService.shutdown();\n      }\n  \n      // 查询任务\n      private static class QueryTask implements Runnable {\n          private int id;\n  \n          public QueryTask(int id) {\n              this.id = id;\n          }\n  \n          @Override\n          public void run() {\n              Connection conn = null;\n              Statement stmt = null;\n              try {\n                  // 注册JDBC驱动\n                  Class.forName(JDBC_DRIVER);\n  \n                  // 打开连接\n                  conn = DriverManager.getConnection(DB_URL, USER, PASS);\n  \n                  // 执行查询\n                  stmt = conn.createStatement();\n                  String sql = \"SELECT * FROM users WHERE id=\" + id;\n                  ResultSet rs = stmt.executeQuery(sql);\n  \n                  // 处理结果集\n                  while (rs.next()) {\n                      int userId = rs.getInt(\"id\");\n                      String userName = rs.getString(\"name\");\n                      System.out.println(\"用户ID：\" + userId + \"，用户名：\" + userName);\n                  }\n  \n                  // 关闭结果集、语句和连接\n                  rs.close();\n                  stmt.close();\n                  conn.close();\n              } catch (SQLException se) {\n                  se.printStackTrace();\n              } catch (Exception e) {\n                  e.printStackTrace();\n              } finally {\n                  try {\n                      if (stmt != null) stmt.close();\n                  } catch (SQLException se2) {\n                  }\n                  try {\n                      if (conn != null) conn.close();\n                  } catch (SQLException se) {\n                      se.printStackTrace();\n                  }\n              }\n          }\n      }\n  }\n```\n\n这段代码演示了如何使用线程池来执行多个并发数据库查询任务。在这个例子中，我们使用了Java JDBC来访问MySQL数据库，并使用了内置的`Executors.newFixedThreadPool()`方法来创建大小为10的线程池。\n\n每个查询任务都被封装在一个独立的`QueryTask`类中，这个类实现了`Runnable`接口，可以作为线程执行。在`main()`方法中，我们通过一个循环来创建多个`QueryTask`实例，并将它们提交给线程池执行。\n\n在`run()`方法中，我们首先获取一个数据库连接（这里使用了JDBC的标准方式），然后执行一条查询语句，并将结果集打印出来。完成查询操作后，我们需要关闭结果集、语句和连接，以释放系统资源。\n\n最后，在程序执行完所有查询任务后，我们调用线程池的`shutdown()`方法来关闭线程池。\n\n**实际上，常见的数据库访问框架（如JDBC、Hibernate等）通常也会内置线程池功能，以便开发者能够方便地使用线程池来优化数据库访问，因此不需要手动创建线程池。上述代码只是一个例子。**\n\n## 4.在一个短视频app的后端研发中，哪些地方会使用到线程池？\n\n\n\n1. 请求处理：当用户发送请求到服务器时，服务器需要对请求进行处理，并返回相应结果。为了提高并发处理能力，可以使用线程池来处理请求。\n2. 数据库访问：在短视频App的后端中，可能需要频繁地对数据库进行读写操作，使用线程池来管理数据库连接池，可以避免频繁创建和销毁数据库连接带来的开销，并且更好地控制系统的资源使用情况。\n3. 文件上传和下载：在短视频App中，用户可能会上传和下载大量的视频和图片等文件。使用线程池来处理这些文件的上传和下载任务，可以提高系统的并发处理能力和响应速度。\n4. 消息推送：在短视频App中，可能需要向用户推送各种消息，如点赞、评论、关注等。为了提高消息推送的并发能力，可以使用线程池来处理消息推送任务。\n5. 异步处理：在短视频App的后端中，一些非核心业务逻辑可能需要异步处理，以避免阻塞主线程。例如，将视频转码、生成缩略图等操作可以放入线程池中异步执行。\n\n总之，在短视频App的后端研发中，使用线程池可以提高系统的并发处理能力和响应速度，并且更好地管理系统的资源使用情况。","source":"_posts/线程池的小例子.md","raw":"## 1. 一个简单的在播放视频中使用线程池的例子\n\n在这个示例中，线程池创建了一个固定大小的线程池，最多同时运行 poolSize 个任务。每当用户播放一个短视频时，将启动下载、解码和渲染视频的任务，并在正确的时机等待任务完成或取消任务。使用的是submit()方法，返回一个future类型的对象。\n\n```\n  import java.util.concurrent.ExecutorService;\n  import java.util.concurrent.Executors;\n  import java.util.concurrent.Future;\n  import java.util.concurrent.TimeUnit;\n  \n  public class ShortVideoApp {\n      \n      private ExecutorService threadPool; // 线程池\n      \n      public ShortVideoApp(int poolSize) {\n          threadPool = Executors.newFixedThreadPool(poolSize); // 创建固定大小的线程池\n      }\n      \n      public void playShortVideo(String videoUrl) throws InterruptedException {\n          Future downloadFuture = threadPool.submit(() -> download(videoUrl)); // 提交下载任务并获取 Future 对象\n          Future decodeFuture = threadPool.submit(this::decode); // 提交解码任务并获取 Future 对象\n          Future renderFuture = threadPool.submit(this::render); // 提交渲染任务并获取 Future 对象\n          \n          try {\n              downloadFuture.get(1, TimeUnit.SECONDS); // 等待下载完成，最多等待 1 秒钟\n              decodeFuture.get(); // 等待解码完成\n              renderFuture.get(); // 等待渲染完成\n          } catch (Exception e) {\n              downloadFuture.cancel(true); // 取消下载任务\n              decodeFuture.cancel(true); // 取消解码任务\n              renderFuture.cancel(true); // 取消渲染任务\n              throw new InterruptedException(\"播放短视频失败：\" + e.getMessage());\n          }\n      }\n      \n      public void shutdown() {\n          threadPool.shutdown(); // 关闭线程池\n          try {\n              if (!threadPool.awaitTermination(60, TimeUnit.SECONDS)) { // 最多等待 60 秒钟\n                  threadPool.shutdownNow(); // 强制关闭线程池\n                  if (!threadPool.awaitTermination(60, TimeUnit.SECONDS)) { // 再次等待 60 秒钟\n                      System.err.println(\"线程池强制关闭失败\");\n                  }\n              }\n          } catch (InterruptedException e) {\n              threadPool.shutdownNow(); // 强制关闭线程池\n              Thread.currentThread().interrupt(); // 重置中断标志位\n          }\n      }\n      \n      private void download(String videoUrl) {\n          System.out.println(\"开始下载视频：\" + videoUrl);\n          try {\n              Thread.sleep(3000); // 模拟下载耗时\n          } catch (InterruptedException e) {\n              Thread.currentThread().interrupt(); // 重置中断标志位\n          }\n          System.out.println(\"视频下载完成\");\n      }\n      \n      private Void decode() {\n          System.out.println(\"开始解码视频\");\n          ...\n      }\n      \n      private Void render() {\n          System.out.println(\"开始渲染视频\");\n          ...\n      }\n  }\n```\n\n## 2.一个更简单的在播放视频中使用线程池的例子\n\n使用execute()，没有返回值，这会导致不知道任务是否成功执行。\n\nnew Runnable() 是在 Java 中创建一个实现了 Runnable 接口的匿名内部类的实例。Runnable 接口是 Java 标准库中定义的一个函数式接口，它只包含一个无参方法 run()。\n\n```\n  import java.util.concurrent.ExecutorService;\n  import java.util.concurrent.Executors;\n  \n  public class ShortVideoApp {\n      \n      private ExecutorService threadPool = Executors.newFixedThreadPool(4); // 创建固定大小的线程池\n      \n      public void playShortVideo(String videoUrl) {\n          threadPool.execute(new Runnable() { // 提交任务给线程池执行\n              @Override\n              public void run() {\n                  // 下载视频\n                  download(videoUrl);\n                  \n                  // 解码视频\n                  decode();\n                  \n                  // 渲染视频\n                  render();\n              }\n          });\n      }\n      \n      private void download(String videoUrl) {\n          // 下载视频文件\n      }\n      \n      private void decode() {\n          // 解码视频文件\n      }\n      \n      private void render() {\n          // 渲染视频画面\n      }\n  }\n```\n\n使用 new Runnable() 创建一个实现了 Runnable 接口的匿名内部类的实例，可以方便地将该实例作为参数传递给其他方法或类的构造函数。除此之外，也可以直接使用Lambda表达式：\n\n```\n  threadPool.execute(() -> {\n      // 下载视频\n      download(videoUrl);      \n      // 解码视频\n      decode();\n      // 渲染视频\n      render();\n  });\n```\n\n## 3. 使用线程池访问数据库\n\n```\n  import java.sql.Connection;\n  import java.sql.DriverManager;\n  import java.sql.ResultSet;\n  import java.sql.SQLException;\n  import java.sql.Statement;\n  import java.util.concurrent.ExecutorService;\n  import java.util.concurrent.Executors;\n  \n  public class DBUtil {\n      // JDBC driver和数据库URL\n      static final String JDBC_DRIVER = \"com.mysql.jdbc.Driver\";\n      static final String DB_URL = \"jdbc:mysql://localhost:3306/test\";\n  \n      // 数据库用户名和密码\n      static final String USER = \"root\";\n      static final String PASS = \"123456\";\n  \n      // 线程池大小\n      static final int THREAD_POOL_SIZE = 10;\n  \n      // 创建线程池\n      private static ExecutorService executorService = Executors.newFixedThreadPool(THREAD_POOL_SIZE);\n  \n      public static void main(String[] args) {\n          // 执行多个查询任务\n          for (int i = 1; i <= 10; i++) {\n              executorService.execute(new QueryTask(i));\n          }\n  \n          // 关闭线程池\n          executorService.shutdown();\n      }\n  \n      // 查询任务\n      private static class QueryTask implements Runnable {\n          private int id;\n  \n          public QueryTask(int id) {\n              this.id = id;\n          }\n  \n          @Override\n          public void run() {\n              Connection conn = null;\n              Statement stmt = null;\n              try {\n                  // 注册JDBC驱动\n                  Class.forName(JDBC_DRIVER);\n  \n                  // 打开连接\n                  conn = DriverManager.getConnection(DB_URL, USER, PASS);\n  \n                  // 执行查询\n                  stmt = conn.createStatement();\n                  String sql = \"SELECT * FROM users WHERE id=\" + id;\n                  ResultSet rs = stmt.executeQuery(sql);\n  \n                  // 处理结果集\n                  while (rs.next()) {\n                      int userId = rs.getInt(\"id\");\n                      String userName = rs.getString(\"name\");\n                      System.out.println(\"用户ID：\" + userId + \"，用户名：\" + userName);\n                  }\n  \n                  // 关闭结果集、语句和连接\n                  rs.close();\n                  stmt.close();\n                  conn.close();\n              } catch (SQLException se) {\n                  se.printStackTrace();\n              } catch (Exception e) {\n                  e.printStackTrace();\n              } finally {\n                  try {\n                      if (stmt != null) stmt.close();\n                  } catch (SQLException se2) {\n                  }\n                  try {\n                      if (conn != null) conn.close();\n                  } catch (SQLException se) {\n                      se.printStackTrace();\n                  }\n              }\n          }\n      }\n  }\n```\n\n这段代码演示了如何使用线程池来执行多个并发数据库查询任务。在这个例子中，我们使用了Java JDBC来访问MySQL数据库，并使用了内置的`Executors.newFixedThreadPool()`方法来创建大小为10的线程池。\n\n每个查询任务都被封装在一个独立的`QueryTask`类中，这个类实现了`Runnable`接口，可以作为线程执行。在`main()`方法中，我们通过一个循环来创建多个`QueryTask`实例，并将它们提交给线程池执行。\n\n在`run()`方法中，我们首先获取一个数据库连接（这里使用了JDBC的标准方式），然后执行一条查询语句，并将结果集打印出来。完成查询操作后，我们需要关闭结果集、语句和连接，以释放系统资源。\n\n最后，在程序执行完所有查询任务后，我们调用线程池的`shutdown()`方法来关闭线程池。\n\n**实际上，常见的数据库访问框架（如JDBC、Hibernate等）通常也会内置线程池功能，以便开发者能够方便地使用线程池来优化数据库访问，因此不需要手动创建线程池。上述代码只是一个例子。**\n\n## 4.在一个短视频app的后端研发中，哪些地方会使用到线程池？\n\n\n\n1. 请求处理：当用户发送请求到服务器时，服务器需要对请求进行处理，并返回相应结果。为了提高并发处理能力，可以使用线程池来处理请求。\n2. 数据库访问：在短视频App的后端中，可能需要频繁地对数据库进行读写操作，使用线程池来管理数据库连接池，可以避免频繁创建和销毁数据库连接带来的开销，并且更好地控制系统的资源使用情况。\n3. 文件上传和下载：在短视频App中，用户可能会上传和下载大量的视频和图片等文件。使用线程池来处理这些文件的上传和下载任务，可以提高系统的并发处理能力和响应速度。\n4. 消息推送：在短视频App中，可能需要向用户推送各种消息，如点赞、评论、关注等。为了提高消息推送的并发能力，可以使用线程池来处理消息推送任务。\n5. 异步处理：在短视频App的后端中，一些非核心业务逻辑可能需要异步处理，以避免阻塞主线程。例如，将视频转码、生成缩略图等操作可以放入线程池中异步执行。\n\n总之，在短视频App的后端研发中，使用线程池可以提高系统的并发处理能力和响应速度，并且更好地管理系统的资源使用情况。","slug":"线程池的小例子","published":1,"date":"2023-04-27T08:01:11.996Z","updated":"2023-04-27T08:07:06.681Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clh0gaw6b000378w1fvx356wh","content":"<h2 id=\"1-一个简单的在播放视频中使用线程池的例子\"><a href=\"#1-一个简单的在播放视频中使用线程池的例子\" class=\"headerlink\" title=\"1. 一个简单的在播放视频中使用线程池的例子\"></a>1. 一个简单的在播放视频中使用线程池的例子</h2><p>在这个示例中，线程池创建了一个固定大小的线程池，最多同时运行 poolSize 个任务。每当用户播放一个短视频时，将启动下载、解码和渲染视频的任务，并在正确的时机等待任务完成或取消任务。使用的是submit()方法，返回一个future类型的对象。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.concurrent.ExecutorService;</span><br><span class=\"line\">import java.util.concurrent.Executors;</span><br><span class=\"line\">import java.util.concurrent.Future;</span><br><span class=\"line\">import java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\">public class ShortVideoApp &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private ExecutorService threadPool; // 线程池</span><br><span class=\"line\">    </span><br><span class=\"line\">    public ShortVideoApp(int poolSize) &#123;</span><br><span class=\"line\">        threadPool = Executors.newFixedThreadPool(poolSize); // 创建固定大小的线程池</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public void playShortVideo(String videoUrl) throws InterruptedException &#123;</span><br><span class=\"line\">        Future downloadFuture = threadPool.submit(() -&gt; download(videoUrl)); // 提交下载任务并获取 Future 对象</span><br><span class=\"line\">        Future decodeFuture = threadPool.submit(this::decode); // 提交解码任务并获取 Future 对象</span><br><span class=\"line\">        Future renderFuture = threadPool.submit(this::render); // 提交渲染任务并获取 Future 对象</span><br><span class=\"line\">        </span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            downloadFuture.get(1, TimeUnit.SECONDS); // 等待下载完成，最多等待 1 秒钟</span><br><span class=\"line\">            decodeFuture.get(); // 等待解码完成</span><br><span class=\"line\">            renderFuture.get(); // 等待渲染完成</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            downloadFuture.cancel(true); // 取消下载任务</span><br><span class=\"line\">            decodeFuture.cancel(true); // 取消解码任务</span><br><span class=\"line\">            renderFuture.cancel(true); // 取消渲染任务</span><br><span class=\"line\">            throw new InterruptedException(&quot;播放短视频失败：&quot; + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public void shutdown() &#123;</span><br><span class=\"line\">        threadPool.shutdown(); // 关闭线程池</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if (!threadPool.awaitTermination(60, TimeUnit.SECONDS)) &#123; // 最多等待 60 秒钟</span><br><span class=\"line\">                threadPool.shutdownNow(); // 强制关闭线程池</span><br><span class=\"line\">                if (!threadPool.awaitTermination(60, TimeUnit.SECONDS)) &#123; // 再次等待 60 秒钟</span><br><span class=\"line\">                    System.err.println(&quot;线程池强制关闭失败&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            threadPool.shutdownNow(); // 强制关闭线程池</span><br><span class=\"line\">            Thread.currentThread().interrupt(); // 重置中断标志位</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private void download(String videoUrl) &#123;</span><br><span class=\"line\">        System.out.println(&quot;开始下载视频：&quot; + videoUrl);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Thread.sleep(3000); // 模拟下载耗时</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            Thread.currentThread().interrupt(); // 重置中断标志位</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(&quot;视频下载完成&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private Void decode() &#123;</span><br><span class=\"line\">        System.out.println(&quot;开始解码视频&quot;);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private Void render() &#123;</span><br><span class=\"line\">        System.out.println(&quot;开始渲染视频&quot;);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-一个更简单的在播放视频中使用线程池的例子\"><a href=\"#2-一个更简单的在播放视频中使用线程池的例子\" class=\"headerlink\" title=\"2.一个更简单的在播放视频中使用线程池的例子\"></a>2.一个更简单的在播放视频中使用线程池的例子</h2><p>使用execute()，没有返回值，这会导致不知道任务是否成功执行。</p>\n<p>new Runnable() 是在 Java 中创建一个实现了 Runnable 接口的匿名内部类的实例。Runnable 接口是 Java 标准库中定义的一个函数式接口，它只包含一个无参方法 run()。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.concurrent.ExecutorService;</span><br><span class=\"line\">import java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\">public class ShortVideoApp &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private ExecutorService threadPool = Executors.newFixedThreadPool(4); // 创建固定大小的线程池</span><br><span class=\"line\">    </span><br><span class=\"line\">    public void playShortVideo(String videoUrl) &#123;</span><br><span class=\"line\">        threadPool.execute(new Runnable() &#123; // 提交任务给线程池执行</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                // 下载视频</span><br><span class=\"line\">                download(videoUrl);</span><br><span class=\"line\">                </span><br><span class=\"line\">                // 解码视频</span><br><span class=\"line\">                decode();</span><br><span class=\"line\">                </span><br><span class=\"line\">                // 渲染视频</span><br><span class=\"line\">                render();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private void download(String videoUrl) &#123;</span><br><span class=\"line\">        // 下载视频文件</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private void decode() &#123;</span><br><span class=\"line\">        // 解码视频文件</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private void render() &#123;</span><br><span class=\"line\">        // 渲染视频画面</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 new Runnable() 创建一个实现了 Runnable 接口的匿名内部类的实例，可以方便地将该实例作为参数传递给其他方法或类的构造函数。除此之外，也可以直接使用Lambda表达式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">threadPool.execute(() -&gt; &#123;</span><br><span class=\"line\">    // 下载视频</span><br><span class=\"line\">    download(videoUrl);      </span><br><span class=\"line\">    // 解码视频</span><br><span class=\"line\">    decode();</span><br><span class=\"line\">    // 渲染视频</span><br><span class=\"line\">    render();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-使用线程池访问数据库\"><a href=\"#3-使用线程池访问数据库\" class=\"headerlink\" title=\"3. 使用线程池访问数据库\"></a>3. 使用线程池访问数据库</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.sql.DriverManager;</span><br><span class=\"line\">import java.sql.ResultSet;</span><br><span class=\"line\">import java.sql.SQLException;</span><br><span class=\"line\">import java.sql.Statement;</span><br><span class=\"line\">import java.util.concurrent.ExecutorService;</span><br><span class=\"line\">import java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\">public class DBUtil &#123;</span><br><span class=\"line\">    // JDBC driver和数据库URL</span><br><span class=\"line\">    static final String JDBC_DRIVER = &quot;com.mysql.jdbc.Driver&quot;;</span><br><span class=\"line\">    static final String DB_URL = &quot;jdbc:mysql://localhost:3306/test&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 数据库用户名和密码</span><br><span class=\"line\">    static final String USER = &quot;root&quot;;</span><br><span class=\"line\">    static final String PASS = &quot;123456&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 线程池大小</span><br><span class=\"line\">    static final int THREAD_POOL_SIZE = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 创建线程池</span><br><span class=\"line\">    private static ExecutorService executorService = Executors.newFixedThreadPool(THREAD_POOL_SIZE);</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // 执行多个查询任务</span><br><span class=\"line\">        for (int i = 1; i &lt;= 10; i++) &#123;</span><br><span class=\"line\">            executorService.execute(new QueryTask(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 关闭线程池</span><br><span class=\"line\">        executorService.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 查询任务</span><br><span class=\"line\">    private static class QueryTask implements Runnable &#123;</span><br><span class=\"line\">        private int id;</span><br><span class=\"line\"></span><br><span class=\"line\">        public QueryTask(int id) &#123;</span><br><span class=\"line\">            this.id = id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            Connection conn = null;</span><br><span class=\"line\">            Statement stmt = null;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                // 注册JDBC驱动</span><br><span class=\"line\">                Class.forName(JDBC_DRIVER);</span><br><span class=\"line\"></span><br><span class=\"line\">                // 打开连接</span><br><span class=\"line\">                conn = DriverManager.getConnection(DB_URL, USER, PASS);</span><br><span class=\"line\"></span><br><span class=\"line\">                // 执行查询</span><br><span class=\"line\">                stmt = conn.createStatement();</span><br><span class=\"line\">                String sql = &quot;SELECT * FROM users WHERE id=&quot; + id;</span><br><span class=\"line\">                ResultSet rs = stmt.executeQuery(sql);</span><br><span class=\"line\"></span><br><span class=\"line\">                // 处理结果集</span><br><span class=\"line\">                while (rs.next()) &#123;</span><br><span class=\"line\">                    int userId = rs.getInt(&quot;id&quot;);</span><br><span class=\"line\">                    String userName = rs.getString(&quot;name&quot;);</span><br><span class=\"line\">                    System.out.println(&quot;用户ID：&quot; + userId + &quot;，用户名：&quot; + userName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                // 关闭结果集、语句和连接</span><br><span class=\"line\">                rs.close();</span><br><span class=\"line\">                stmt.close();</span><br><span class=\"line\">                conn.close();</span><br><span class=\"line\">            &#125; catch (SQLException se) &#123;</span><br><span class=\"line\">                se.printStackTrace();</span><br><span class=\"line\">            &#125; catch (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    if (stmt != null) stmt.close();</span><br><span class=\"line\">                &#125; catch (SQLException se2) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    if (conn != null) conn.close();</span><br><span class=\"line\">                &#125; catch (SQLException se) &#123;</span><br><span class=\"line\">                    se.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码演示了如何使用线程池来执行多个并发数据库查询任务。在这个例子中，我们使用了Java JDBC来访问MySQL数据库，并使用了内置的<code>Executors.newFixedThreadPool()</code>方法来创建大小为10的线程池。</p>\n<p>每个查询任务都被封装在一个独立的<code>QueryTask</code>类中，这个类实现了<code>Runnable</code>接口，可以作为线程执行。在<code>main()</code>方法中，我们通过一个循环来创建多个<code>QueryTask</code>实例，并将它们提交给线程池执行。</p>\n<p>在<code>run()</code>方法中，我们首先获取一个数据库连接（这里使用了JDBC的标准方式），然后执行一条查询语句，并将结果集打印出来。完成查询操作后，我们需要关闭结果集、语句和连接，以释放系统资源。</p>\n<p>最后，在程序执行完所有查询任务后，我们调用线程池的<code>shutdown()</code>方法来关闭线程池。</p>\n<p><strong>实际上，常见的数据库访问框架（如JDBC、Hibernate等）通常也会内置线程池功能，以便开发者能够方便地使用线程池来优化数据库访问，因此不需要手动创建线程池。上述代码只是一个例子。</strong></p>\n<h2 id=\"4-在一个短视频app的后端研发中，哪些地方会使用到线程池？\"><a href=\"#4-在一个短视频app的后端研发中，哪些地方会使用到线程池？\" class=\"headerlink\" title=\"4.在一个短视频app的后端研发中，哪些地方会使用到线程池？\"></a>4.在一个短视频app的后端研发中，哪些地方会使用到线程池？</h2><ol>\n<li>请求处理：当用户发送请求到服务器时，服务器需要对请求进行处理，并返回相应结果。为了提高并发处理能力，可以使用线程池来处理请求。</li>\n<li>数据库访问：在短视频App的后端中，可能需要频繁地对数据库进行读写操作，使用线程池来管理数据库连接池，可以避免频繁创建和销毁数据库连接带来的开销，并且更好地控制系统的资源使用情况。</li>\n<li>文件上传和下载：在短视频App中，用户可能会上传和下载大量的视频和图片等文件。使用线程池来处理这些文件的上传和下载任务，可以提高系统的并发处理能力和响应速度。</li>\n<li>消息推送：在短视频App中，可能需要向用户推送各种消息，如点赞、评论、关注等。为了提高消息推送的并发能力，可以使用线程池来处理消息推送任务。</li>\n<li>异步处理：在短视频App的后端中，一些非核心业务逻辑可能需要异步处理，以避免阻塞主线程。例如，将视频转码、生成缩略图等操作可以放入线程池中异步执行。</li>\n</ol>\n<p>总之，在短视频App的后端研发中，使用线程池可以提高系统的并发处理能力和响应速度，并且更好地管理系统的资源使用情况。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-一个简单的在播放视频中使用线程池的例子\"><a href=\"#1-一个简单的在播放视频中使用线程池的例子\" class=\"headerlink\" title=\"1. 一个简单的在播放视频中使用线程池的例子\"></a>1. 一个简单的在播放视频中使用线程池的例子</h2><p>在这个示例中，线程池创建了一个固定大小的线程池，最多同时运行 poolSize 个任务。每当用户播放一个短视频时，将启动下载、解码和渲染视频的任务，并在正确的时机等待任务完成或取消任务。使用的是submit()方法，返回一个future类型的对象。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.concurrent.ExecutorService;</span><br><span class=\"line\">import java.util.concurrent.Executors;</span><br><span class=\"line\">import java.util.concurrent.Future;</span><br><span class=\"line\">import java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\">public class ShortVideoApp &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private ExecutorService threadPool; // 线程池</span><br><span class=\"line\">    </span><br><span class=\"line\">    public ShortVideoApp(int poolSize) &#123;</span><br><span class=\"line\">        threadPool = Executors.newFixedThreadPool(poolSize); // 创建固定大小的线程池</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public void playShortVideo(String videoUrl) throws InterruptedException &#123;</span><br><span class=\"line\">        Future downloadFuture = threadPool.submit(() -&gt; download(videoUrl)); // 提交下载任务并获取 Future 对象</span><br><span class=\"line\">        Future decodeFuture = threadPool.submit(this::decode); // 提交解码任务并获取 Future 对象</span><br><span class=\"line\">        Future renderFuture = threadPool.submit(this::render); // 提交渲染任务并获取 Future 对象</span><br><span class=\"line\">        </span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            downloadFuture.get(1, TimeUnit.SECONDS); // 等待下载完成，最多等待 1 秒钟</span><br><span class=\"line\">            decodeFuture.get(); // 等待解码完成</span><br><span class=\"line\">            renderFuture.get(); // 等待渲染完成</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            downloadFuture.cancel(true); // 取消下载任务</span><br><span class=\"line\">            decodeFuture.cancel(true); // 取消解码任务</span><br><span class=\"line\">            renderFuture.cancel(true); // 取消渲染任务</span><br><span class=\"line\">            throw new InterruptedException(&quot;播放短视频失败：&quot; + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public void shutdown() &#123;</span><br><span class=\"line\">        threadPool.shutdown(); // 关闭线程池</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if (!threadPool.awaitTermination(60, TimeUnit.SECONDS)) &#123; // 最多等待 60 秒钟</span><br><span class=\"line\">                threadPool.shutdownNow(); // 强制关闭线程池</span><br><span class=\"line\">                if (!threadPool.awaitTermination(60, TimeUnit.SECONDS)) &#123; // 再次等待 60 秒钟</span><br><span class=\"line\">                    System.err.println(&quot;线程池强制关闭失败&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            threadPool.shutdownNow(); // 强制关闭线程池</span><br><span class=\"line\">            Thread.currentThread().interrupt(); // 重置中断标志位</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private void download(String videoUrl) &#123;</span><br><span class=\"line\">        System.out.println(&quot;开始下载视频：&quot; + videoUrl);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Thread.sleep(3000); // 模拟下载耗时</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            Thread.currentThread().interrupt(); // 重置中断标志位</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(&quot;视频下载完成&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private Void decode() &#123;</span><br><span class=\"line\">        System.out.println(&quot;开始解码视频&quot;);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private Void render() &#123;</span><br><span class=\"line\">        System.out.println(&quot;开始渲染视频&quot;);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-一个更简单的在播放视频中使用线程池的例子\"><a href=\"#2-一个更简单的在播放视频中使用线程池的例子\" class=\"headerlink\" title=\"2.一个更简单的在播放视频中使用线程池的例子\"></a>2.一个更简单的在播放视频中使用线程池的例子</h2><p>使用execute()，没有返回值，这会导致不知道任务是否成功执行。</p>\n<p>new Runnable() 是在 Java 中创建一个实现了 Runnable 接口的匿名内部类的实例。Runnable 接口是 Java 标准库中定义的一个函数式接口，它只包含一个无参方法 run()。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.concurrent.ExecutorService;</span><br><span class=\"line\">import java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\">public class ShortVideoApp &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private ExecutorService threadPool = Executors.newFixedThreadPool(4); // 创建固定大小的线程池</span><br><span class=\"line\">    </span><br><span class=\"line\">    public void playShortVideo(String videoUrl) &#123;</span><br><span class=\"line\">        threadPool.execute(new Runnable() &#123; // 提交任务给线程池执行</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                // 下载视频</span><br><span class=\"line\">                download(videoUrl);</span><br><span class=\"line\">                </span><br><span class=\"line\">                // 解码视频</span><br><span class=\"line\">                decode();</span><br><span class=\"line\">                </span><br><span class=\"line\">                // 渲染视频</span><br><span class=\"line\">                render();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private void download(String videoUrl) &#123;</span><br><span class=\"line\">        // 下载视频文件</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private void decode() &#123;</span><br><span class=\"line\">        // 解码视频文件</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private void render() &#123;</span><br><span class=\"line\">        // 渲染视频画面</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 new Runnable() 创建一个实现了 Runnable 接口的匿名内部类的实例，可以方便地将该实例作为参数传递给其他方法或类的构造函数。除此之外，也可以直接使用Lambda表达式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">threadPool.execute(() -&gt; &#123;</span><br><span class=\"line\">    // 下载视频</span><br><span class=\"line\">    download(videoUrl);      </span><br><span class=\"line\">    // 解码视频</span><br><span class=\"line\">    decode();</span><br><span class=\"line\">    // 渲染视频</span><br><span class=\"line\">    render();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-使用线程池访问数据库\"><a href=\"#3-使用线程池访问数据库\" class=\"headerlink\" title=\"3. 使用线程池访问数据库\"></a>3. 使用线程池访问数据库</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.sql.DriverManager;</span><br><span class=\"line\">import java.sql.ResultSet;</span><br><span class=\"line\">import java.sql.SQLException;</span><br><span class=\"line\">import java.sql.Statement;</span><br><span class=\"line\">import java.util.concurrent.ExecutorService;</span><br><span class=\"line\">import java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\">public class DBUtil &#123;</span><br><span class=\"line\">    // JDBC driver和数据库URL</span><br><span class=\"line\">    static final String JDBC_DRIVER = &quot;com.mysql.jdbc.Driver&quot;;</span><br><span class=\"line\">    static final String DB_URL = &quot;jdbc:mysql://localhost:3306/test&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 数据库用户名和密码</span><br><span class=\"line\">    static final String USER = &quot;root&quot;;</span><br><span class=\"line\">    static final String PASS = &quot;123456&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 线程池大小</span><br><span class=\"line\">    static final int THREAD_POOL_SIZE = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 创建线程池</span><br><span class=\"line\">    private static ExecutorService executorService = Executors.newFixedThreadPool(THREAD_POOL_SIZE);</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // 执行多个查询任务</span><br><span class=\"line\">        for (int i = 1; i &lt;= 10; i++) &#123;</span><br><span class=\"line\">            executorService.execute(new QueryTask(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 关闭线程池</span><br><span class=\"line\">        executorService.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 查询任务</span><br><span class=\"line\">    private static class QueryTask implements Runnable &#123;</span><br><span class=\"line\">        private int id;</span><br><span class=\"line\"></span><br><span class=\"line\">        public QueryTask(int id) &#123;</span><br><span class=\"line\">            this.id = id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            Connection conn = null;</span><br><span class=\"line\">            Statement stmt = null;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                // 注册JDBC驱动</span><br><span class=\"line\">                Class.forName(JDBC_DRIVER);</span><br><span class=\"line\"></span><br><span class=\"line\">                // 打开连接</span><br><span class=\"line\">                conn = DriverManager.getConnection(DB_URL, USER, PASS);</span><br><span class=\"line\"></span><br><span class=\"line\">                // 执行查询</span><br><span class=\"line\">                stmt = conn.createStatement();</span><br><span class=\"line\">                String sql = &quot;SELECT * FROM users WHERE id=&quot; + id;</span><br><span class=\"line\">                ResultSet rs = stmt.executeQuery(sql);</span><br><span class=\"line\"></span><br><span class=\"line\">                // 处理结果集</span><br><span class=\"line\">                while (rs.next()) &#123;</span><br><span class=\"line\">                    int userId = rs.getInt(&quot;id&quot;);</span><br><span class=\"line\">                    String userName = rs.getString(&quot;name&quot;);</span><br><span class=\"line\">                    System.out.println(&quot;用户ID：&quot; + userId + &quot;，用户名：&quot; + userName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                // 关闭结果集、语句和连接</span><br><span class=\"line\">                rs.close();</span><br><span class=\"line\">                stmt.close();</span><br><span class=\"line\">                conn.close();</span><br><span class=\"line\">            &#125; catch (SQLException se) &#123;</span><br><span class=\"line\">                se.printStackTrace();</span><br><span class=\"line\">            &#125; catch (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    if (stmt != null) stmt.close();</span><br><span class=\"line\">                &#125; catch (SQLException se2) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    if (conn != null) conn.close();</span><br><span class=\"line\">                &#125; catch (SQLException se) &#123;</span><br><span class=\"line\">                    se.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码演示了如何使用线程池来执行多个并发数据库查询任务。在这个例子中，我们使用了Java JDBC来访问MySQL数据库，并使用了内置的<code>Executors.newFixedThreadPool()</code>方法来创建大小为10的线程池。</p>\n<p>每个查询任务都被封装在一个独立的<code>QueryTask</code>类中，这个类实现了<code>Runnable</code>接口，可以作为线程执行。在<code>main()</code>方法中，我们通过一个循环来创建多个<code>QueryTask</code>实例，并将它们提交给线程池执行。</p>\n<p>在<code>run()</code>方法中，我们首先获取一个数据库连接（这里使用了JDBC的标准方式），然后执行一条查询语句，并将结果集打印出来。完成查询操作后，我们需要关闭结果集、语句和连接，以释放系统资源。</p>\n<p>最后，在程序执行完所有查询任务后，我们调用线程池的<code>shutdown()</code>方法来关闭线程池。</p>\n<p><strong>实际上，常见的数据库访问框架（如JDBC、Hibernate等）通常也会内置线程池功能，以便开发者能够方便地使用线程池来优化数据库访问，因此不需要手动创建线程池。上述代码只是一个例子。</strong></p>\n<h2 id=\"4-在一个短视频app的后端研发中，哪些地方会使用到线程池？\"><a href=\"#4-在一个短视频app的后端研发中，哪些地方会使用到线程池？\" class=\"headerlink\" title=\"4.在一个短视频app的后端研发中，哪些地方会使用到线程池？\"></a>4.在一个短视频app的后端研发中，哪些地方会使用到线程池？</h2><ol>\n<li>请求处理：当用户发送请求到服务器时，服务器需要对请求进行处理，并返回相应结果。为了提高并发处理能力，可以使用线程池来处理请求。</li>\n<li>数据库访问：在短视频App的后端中，可能需要频繁地对数据库进行读写操作，使用线程池来管理数据库连接池，可以避免频繁创建和销毁数据库连接带来的开销，并且更好地控制系统的资源使用情况。</li>\n<li>文件上传和下载：在短视频App中，用户可能会上传和下载大量的视频和图片等文件。使用线程池来处理这些文件的上传和下载任务，可以提高系统的并发处理能力和响应速度。</li>\n<li>消息推送：在短视频App中，可能需要向用户推送各种消息，如点赞、评论、关注等。为了提高消息推送的并发能力，可以使用线程池来处理消息推送任务。</li>\n<li>异步处理：在短视频App的后端中，一些非核心业务逻辑可能需要异步处理，以避免阻塞主线程。例如，将视频转码、生成缩略图等操作可以放入线程池中异步执行。</li>\n</ol>\n<p>总之，在短视频App的后端研发中，使用线程池可以提高系统的并发处理能力和响应速度，并且更好地管理系统的资源使用情况。</p>\n"}],"PostAsset":[{"_id":"source/_posts/novelai积累心得/grid-0177_1676116091805_0.jpg","post":"clh0gaw6a000278w190825xvc","slug":"grid-0177_1676116091805_0.jpg","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[],"Tag":[]}}